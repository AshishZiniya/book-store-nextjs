// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Book Store Models
model Book {
  id              String   @id @default(cuid())
  title           String
  isbn            String?
  pageCount       Int?
  publishedDate   DateTime?
  thumbnailUrl    String?
  shortDescription String?
  longDescription  String?
  status          String   @default("PUBLISH")
  authors         String   // JSON string of author names
  categories      String   // JSON string of categories
  price           Float?
  rating          Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  total       Float
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  bookId   String
  quantity Int
  price    Float

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
}
